/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DBInfo.java
 *
 * Created on Nov 13, 2011, 7:22:24 PM
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;

/**
 *
 * @author Raviraj
 */
public class DBInfo extends javax.swing.JPanel {

    boolean readyflag1 = false;
    boolean readyflag2 = false;

    /**
     * Creates new form DBInfo
     */
    public DBInfo() {
        initComponents();
        switchPrimaryButtons(false);
        switchMismatchAndMissingRowsButtonOn(false);
        switchMismatchAndMissingColumnsButtonOn(false);

        showColumnTypeMismatch.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateColumnStructureCompareActionPerformed(evt);
            }
        });
        showMissingColumns.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateColumnStructureCompareActionPerformed(evt);
            }
        });

        loadSpecifiedTablesList("specified_tables.csv");
        loadConnectionInfo();

    }

    public static void resetProgressBars() {
        pbar1.setValue(0);
        pbar2.setValue(0);
    }

    public void switchPrimaryButtons(boolean value) {
        generateRowCountCompare.setEnabled(value);
        generateColumnStructureCompare.setEnabled(value);
        compareFirstNRows.setEnabled(value);
        compareLastNRows.setEnabled(value);
        compareRandomNthRows.setEnabled(value);
    }

    public static void updateProgressStatus(JProgressBar pbar, int i, int limit) {
        pbar.setValue((i * 100) / limit);
    }

    public static JProgressBar getProgressBar1() {
        return pbar1;
    }

    public static JProgressBar getProgressBar2() {
        return pbar2;
    }

    public static void switchMismatchAndMissingRowsButtonOn(boolean value) {
        showRowCountMismatch.setEnabled(value);
        showMissingTables.setEnabled(value);
    }

    public static void switchMismatchAndMissingColumnsButtonOn(boolean value) {
        showColumnTypeMismatch.setEnabled(value);
        showMissingColumns.setEnabled(value);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customizeCompareChoice = new javax.swing.ButtonGroup();
        processTab = new javax.swing.JTabbedPane();
        rowCountCompare = new javax.swing.JPanel();
        generateRowCountCompare = new javax.swing.JButton();
        showRowCountMismatch = new javax.swing.JButton();
        showMissingTables = new javax.swing.JButton();
        dataContentsCompare = new javax.swing.JPanel();
        compareFirstNRows = new javax.swing.JButton();
        compareLastNRows = new javax.swing.JButton();
        compareRandomNthRows = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        N = new javax.swing.JTextField();
        writeComparedContents = new javax.swing.JCheckBox();
        tableStructureCompare = new javax.swing.JPanel();
        generateColumnStructureCompare = new javax.swing.JButton();
        showColumnTypeMismatch = new javax.swing.JButton();
        showMissingColumns = new javax.swing.JButton();
        customizeCompare = new javax.swing.JPanel();
        ignoreSpecifiedTables = new javax.swing.JRadioButton();
        compareSpecifiedTables = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        specifiedTablesList = new javax.swing.JTextArea();
        jLabel16 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        vendor1 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        host1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        port1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dbname1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        user1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        password1 = new javax.swing.JPasswordField();
        setAndTest1 = new javax.swing.JButton();
        pbar1 = new javax.swing.JProgressBar();
        jLabel15 = new javax.swing.JLabel();
        vendor2 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        host2 = new javax.swing.JTextField();
        port2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dbname2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        user2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        password2 = new javax.swing.JPasswordField();
        setAndTest2 = new javax.swing.JButton();
        pbar2 = new javax.swing.JProgressBar();
        swapDbDetails = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        setLayout(null);

        rowCountCompare.setLayout(null);

        generateRowCountCompare.setText("Generate Row Count Result");
        generateRowCountCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRowCountCompareActionPerformed(evt);
            }
        });
        rowCountCompare.add(generateRowCountCompare);
        generateRowCountCompare.setBounds(407, 11, 220, 23);

        showRowCountMismatch.setText("Show Row Count Mismatch");
        showRowCountMismatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRowCountMismatchActionPerformed(evt);
            }
        });
        rowCountCompare.add(showRowCountMismatch);
        showRowCountMismatch.setBounds(407, 52, 220, 23);

        showMissingTables.setText("Show Missing Tables");
        showMissingTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMissingTablesActionPerformed(evt);
            }
        });
        rowCountCompare.add(showMissingTables);
        showMissingTables.setBounds(407, 93, 220, 23);

        processTab.addTab("Row Count Compare", rowCountCompare);

        dataContentsCompare.setLayout(null);

        compareFirstNRows.setText("Compare Data For First [N] Rows");
        compareFirstNRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareFirstNRowsActionPerformed(evt);
            }
        });
        dataContentsCompare.add(compareFirstNRows);
        compareFirstNRows.setBounds(412, 11, 230, 23);

        compareLastNRows.setText("Compare Data For Last [N] Rows");
        compareLastNRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareLastNRowsActionPerformed(evt);
            }
        });
        dataContentsCompare.add(compareLastNRows);
        compareLastNRows.setBounds(412, 52, 230, 23);

        compareRandomNthRows.setText("Compare Data For Random [N]th Rows");
        compareRandomNthRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareRandomNthRowsActionPerformed(evt);
            }
        });
        dataContentsCompare.add(compareRandomNthRows);
        compareRandomNthRows.setBounds(412, 93, 230, 23);

        jLabel13.setText("Value for N: ");
        dataContentsCompare.add(jLabel13);
        jLabel13.setBounds(22, 26, 100, 14);
        dataContentsCompare.add(N);
        N.setBounds(140, 20, 51, 20);

        writeComparedContents.setText("write compared contents to files");
        dataContentsCompare.add(writeComparedContents);
        writeComparedContents.setBounds(20, 70, 320, 23);

        processTab.addTab("Data Contents Compare", dataContentsCompare);

        tableStructureCompare.setLayout(null);

        generateColumnStructureCompare.setText("Generate Column Structure Result");
        generateColumnStructureCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateColumnStructureCompareActionPerformed(evt);
            }
        });
        tableStructureCompare.add(generateColumnStructureCompare);
        generateColumnStructureCompare.setBounds(410, 11, 240, 23);

        showColumnTypeMismatch.setText("Show Column Type Mismatch");
        tableStructureCompare.add(showColumnTypeMismatch);
        showColumnTypeMismatch.setBounds(410, 52, 240, 23);

        showMissingColumns.setText("Show Missing Columns");
        tableStructureCompare.add(showMissingColumns);
        showMissingColumns.setBounds(410, 93, 240, 23);

        processTab.addTab("Table Structure Compare", tableStructureCompare);

        customizeCompare.setLayout(null);

        customizeCompareChoice.add(ignoreSpecifiedTables);
        ignoreSpecifiedTables.setText("Exclude Specified Table From Comparison");
        ignoreSpecifiedTables.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ignoreSpecifiedTablesStateChanged(evt);
            }
        });
        customizeCompare.add(ignoreSpecifiedTables);
        ignoreSpecifiedTables.setBounds(360, 10, 310, 23);

        customizeCompareChoice.add(compareSpecifiedTables);
        compareSpecifiedTables.setText("Compare Specified Tables Only For Comparison");
        customizeCompare.add(compareSpecifiedTables);
        compareSpecifiedTables.setBounds(20, 10, 320, 23);

        specifiedTablesList.setColumns(20);
        specifiedTablesList.setLineWrap(true);
        specifiedTablesList.setRows(5);
        specifiedTablesList.setWrapStyleWord(true);
        specifiedTablesList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                specifiedTablesListFocusLost(evt);
            }
        });
        specifiedTablesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                specifiedTablesListKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                specifiedTablesListKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(specifiedTablesList);

        customizeCompare.add(jScrollPane1);
        jScrollPane1.setBounds(30, 60, 600, 96);

        jLabel16.setText("List Table Names in given CSV format:- \"table_name1\", \"table_name2\", \"table_name3\", .....");
        customizeCompare.add(jLabel16);
        jLabel16.setBounds(30, 40, 590, 14);

        processTab.addTab("Customize Your Compare", customizeCompare);

        add(processTab);
        processTab.setBounds(10, 310, 800, 200);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Primary Database");
        add(jLabel11);
        jLabel11.setBounds(11, 12, 126, 15);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Secondary Database");
        add(jLabel12);
        jLabel12.setBounds(420, 12, 126, 15);

        jLabel14.setText("DB Vendor: ");
        add(jLabel14);
        jLabel14.setBounds(60, 50, 85, 14);

        vendor1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mysql", "mssql" }));
        add(vendor1);
        vendor1.setBounds(180, 50, 88, 20);

        jLabel6.setText("DB Host:");
        add(jLabel6);
        jLabel6.setBounds(60, 80, 85, 14);

        host1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                host1FocusLost(evt);
            }
        });
        add(host1);
        host1.setBounds(180, 80, 120, 20);

        jLabel7.setText("DB Port:");
        add(jLabel7);
        jLabel7.setBounds(60, 110, 85, 14);

        port1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                port1ActionPerformed(evt);
            }
        });
        port1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                port1FocusLost(evt);
            }
        });
        add(port1);
        port1.setBounds(180, 110, 120, 20);

        jLabel8.setText("DB Name:");
        add(jLabel8);
        jLabel8.setBounds(60, 140, 85, 14);

        dbname1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                dbname1FocusLost(evt);
            }
        });
        add(dbname1);
        dbname1.setBounds(180, 140, 120, 20);

        jLabel9.setText("DB User:");
        add(jLabel9);
        jLabel9.setBounds(60, 170, 85, 14);

        user1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                user1FocusLost(evt);
            }
        });
        add(user1);
        user1.setBounds(180, 170, 120, 20);

        jLabel10.setText("DB Password:");
        add(jLabel10);
        jLabel10.setBounds(60, 200, 85, 14);

        password1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                password1FocusLost(evt);
            }
        });
        add(password1);
        password1.setBounds(180, 200, 120, 20);

        setAndTest1.setText("Set Connection");
        setAndTest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAndTest1ActionPerformed(evt);
            }
        });
        add(setAndTest1);
        setAndTest1.setBounds(180, 230, 120, 23);
        add(pbar1);
        pbar1.setBounds(180, 260, 120, 14);

        jLabel15.setText("DB Vendor: ");
        add(jLabel15);
        jLabel15.setBounds(470, 50, 85, 14);

        vendor2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mysql", "mssql" }));
        add(vendor2);
        vendor2.setBounds(590, 50, 87, 20);

        jLabel1.setText("DB Host:");
        add(jLabel1);
        jLabel1.setBounds(470, 80, 85, 14);

        host2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                host2ActionPerformed(evt);
            }
        });
        add(host2);
        host2.setBounds(590, 80, 120, 20);
        add(port2);
        port2.setBounds(590, 110, 120, 20);

        jLabel2.setText("DB Port:");
        add(jLabel2);
        jLabel2.setBounds(470, 110, 85, 14);

        jLabel3.setText("DB Name:");
        add(jLabel3);
        jLabel3.setBounds(470, 140, 85, 14);
        add(dbname2);
        dbname2.setBounds(590, 140, 120, 20);

        jLabel4.setText("DB User:");
        add(jLabel4);
        jLabel4.setBounds(470, 170, 85, 14);
        add(user2);
        user2.setBounds(590, 170, 120, 20);

        jLabel5.setText("DB Password:");
        add(jLabel5);
        jLabel5.setBounds(470, 200, 85, 14);
        add(password2);
        password2.setBounds(590, 200, 120, 20);

        setAndTest2.setText("Set Connection");
        setAndTest2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAndTest2ActionPerformed(evt);
            }
        });
        add(setAndTest2);
        setAndTest2.setBounds(590, 230, 120, 23);
        add(pbar2);
        pbar2.setBounds(590, 260, 120, 14);

        swapDbDetails.setText("swap");
        swapDbDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapDbDetailsActionPerformed(evt);
            }
        });
        add(swapDbDetails);
        swapDbDetails.setBounds(10, 280, 70, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void host2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_host2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_host2ActionPerformed

    private void port1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_port1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_port1ActionPerformed

    private void setAndTest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAndTest1ActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                switchPrimaryButtons(false);
                switchMismatchAndMissingRowsButtonOn(false);
                switchMismatchAndMissingColumnsButtonOn(false);
            }
        });
        new Thread(new Runnable() {

            public void run() {
                if (checkDBInfo1()) {
                    writeDBInfoToFile(new File("primarydb.inf"), vendor1.getSelectedItem().toString(), host1.getText(), port1.getText(), dbname1.getText(), user1.getText(), new String(password1.getPassword()).toString());
                    DatabaseUtil db = new DatabaseUtil();
                    db.setDbInfo(new File("primarydb.inf"));

                    if (db.testConnection()) {
                        readyflag1 = true;
                        if (readyflag1 & readyflag2) {
                            SwingUtilities.invokeLater(new Runnable() {

                                public void run() {

                                    switchPrimaryButtons(true);
                                }
                            });
                            readyflag1 = false;
                            readyflag2 = false;
                        }
//                        else {
//                            SwingUtilities.invokeLater(new Runnable() {
//
//                                public void run() {
//                                    switchPrimaryButtons(false);
//                                    switchMismatchAndMissingRowsButtonOn(false);
//                                    switchMismatchAndMissingColumnsButtonOn(false);
//                                }
//                            });
//                        }
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_setAndTest1ActionPerformed

    private void setAndTest2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAndTest2ActionPerformed
        // TODO add your handling code here:
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                switchPrimaryButtons(false);
                switchMismatchAndMissingRowsButtonOn(false);
                switchMismatchAndMissingColumnsButtonOn(false);
            }
        });
        new Thread(new Runnable() {

            public void run() {
                if (checkDBInfo2()) {
                    writeDBInfoToFile(new File("secondarydb.inf"), vendor2.getSelectedItem().toString(), host2.getText(), port2.getText(), dbname2.getText(), user2.getText(), new String(password2.getPassword()).toString());
                    DatabaseUtil db = new DatabaseUtil();
                    db.setDbInfo(new File("secondarydb.inf"));

                    if (db.testConnection()) {
                        readyflag2 = true;
                        if (readyflag1 & readyflag2) {
                            SwingUtilities.invokeLater(new Runnable() {

                                public void run() {
                                    switchPrimaryButtons(true);
                                }
                            });
                            readyflag1 = false;
                            readyflag2 = false;
                        }
                    }
//                    else {
//                        SwingUtilities.invokeLater(new Runnable() {
//
//                            public void run() {
//                                switchPrimaryButtons(false);
//                                switchMismatchAndMissingRowsButtonOn(false);
//                                switchMismatchAndMissingColumnsButtonOn(false);
//                            }
//                        });
//                    }
                }
            }
        }).start();
    }//GEN-LAST:event_setAndTest2ActionPerformed

    private void generateColumnStructureCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateColumnStructureCompareActionPerformed
        // TODO add your handling code here:
        CompareTwoDBForColumns.start(evt);
}//GEN-LAST:event_generateColumnStructureCompareActionPerformed

    private void compareRandomNthRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareRandomNthRowsActionPerformed
        // TODO add your handling code here:
        if (!N.getText().equals("")) {
            new Thread(new Runnable() {

                public void run() {
                    DataCheck dc = new DataCheck("randomNthRowCompare.csv");
                    //dc.start("randomNthRow", Integer.parseInt(N.getText()));
                    dc.start("randomNthRow", DBInfo.isIgnoreTablesSelected(), Integer.parseInt(N.getText()));
                }
            }).start();
        } else {
            JOptionPane.showMessageDialog(null, "Please provide value for N: number of rows to be evaluated");
        }
}//GEN-LAST:event_compareRandomNthRowsActionPerformed

    private void compareLastNRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareLastNRowsActionPerformed
        // TODO add your handling code here:
        if (!N.getText().equals("")) {
            new Thread(new Runnable() {

                public void run() {
                    DataCheck dc = new DataCheck("LastNRowsCompare.csv");
                    //dc.start("lastNRows", Integer.parseInt(N.getText()));
                    dc.start("lastNRows", DBInfo.isIgnoreTablesSelected(), Integer.parseInt(N.getText()));
                }
            }).start();
            ;
        } else {
            JOptionPane.showMessageDialog(null, "Please provide value for N: number of rows to be evaluated");
        }
}//GEN-LAST:event_compareLastNRowsActionPerformed

    private void compareFirstNRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareFirstNRowsActionPerformed
        // TODO add your handling code here:
        if (!N.getText().equals("")) {
            new Thread(new Runnable() {

                public void run() {
                    DataCheck dc = new DataCheck("FirstNRowsCompare.csv");
                    //dc.start("firstNRows", Integer.parseInt(N.getText()));
                    dc.start("firstNRows", DBInfo.isIgnoreTablesSelected(), Integer.parseInt(N.getText()));
                }
            }).start();
        } else {
            JOptionPane.showMessageDialog(null, "Please provide value for N: number of rows to be evaluated");
        }
}//GEN-LAST:event_compareFirstNRowsActionPerformed

    private void showMissingTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMissingTablesActionPerformed
        // TODO add your handling code here:
        CompareTwoDBRowCounts.start(evt);
}//GEN-LAST:event_showMissingTablesActionPerformed

    private void showRowCountMismatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRowCountMismatchActionPerformed
        // TODO add your handling code here:
        CompareTwoDBRowCounts.start(evt);
}//GEN-LAST:event_showRowCountMismatchActionPerformed

    private void generateRowCountCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRowCountCompareActionPerformed
        // TODO add your handling code here:
        CompareTwoDBRowCounts.start(evt);
}//GEN-LAST:event_generateRowCountCompareActionPerformed

    private void ignoreSpecifiedTablesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ignoreSpecifiedTablesStateChanged
        try {
            saveSpecifiedListOfTables("specified_tables.csv");
        } catch (FileNotFoundException fnfe) {
            Logs.write("Error: couldn't save the specified list of tables", fnfe);
        }

    }//GEN-LAST:event_ignoreSpecifiedTablesStateChanged

    private void specifiedTablesListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_specifiedTablesListKeyTyped
        // TODO add your handling code here:
}//GEN-LAST:event_specifiedTablesListKeyTyped

    private void specifiedTablesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_specifiedTablesListKeyPressed
        // TODO add your handling code here:        
    }//GEN-LAST:event_specifiedTablesListKeyPressed

    private void specifiedTablesListFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_specifiedTablesListFocusLost
        // TODO add your handling code here:
        specifiedTablesList.setText(specifiedTablesList.getText().replaceAll("\n", ","));
        try {
            saveSpecifiedListOfTables("specified_tables.csv");
        } catch (FileNotFoundException fnfe) {
            Logs.write("Error: couldn't save the specified list of tables", fnfe);
        }
    }//GEN-LAST:event_specifiedTablesListFocusLost

    private void host1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_host1FocusLost
        // TODO add your handling code here:
        host2.setText(host1.getText());
    }//GEN-LAST:event_host1FocusLost

    private void port1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_port1FocusLost
        // TODO add your handling code here:
        port2.setText(port1.getText());
    }//GEN-LAST:event_port1FocusLost

    private void dbname1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dbname1FocusLost
        // TODO add your handling code here:
        dbname2.setText(dbname1.getText());
    }//GEN-LAST:event_dbname1FocusLost

    private void user1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_user1FocusLost
        // TODO add your handling code here:
        user2.setText(user1.getText());
    }//GEN-LAST:event_user1FocusLost

    private void password1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_password1FocusLost
        // TODO add your handling code here:
        password2.setText(new String(password1.getPassword()));
    }//GEN-LAST:event_password1FocusLost

    private void swapDbDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapDbDetailsActionPerformed
        // TODO add your handling code here:
        int tempVendorIndex = vendor1.getSelectedIndex();
        String tempHost = host1.getText();
        String tempPort = port1.getText();
        String tempDBName = dbname1.getText();
        String tempUsername = user1.getText();
        String tempPassword = new String(password1.getPassword());

        vendor1.setSelectedIndex(vendor2.getSelectedIndex());
        host1.setText(host2.getText());
        port1.setText(port2.getText());
        dbname1.setText(dbname2.getText());
        user1.setText(user2.getText());
        password1.setText(new String(password2.getPassword()));

        vendor2.setSelectedIndex(tempVendorIndex);
        host2.setText(tempHost);
        port2.setText(tempPort);
        dbname2.setText(tempDBName);
        user2.setText(tempUsername);
        password2.setText(tempPassword);

        switchPrimaryButtons(false);

    }//GEN-LAST:event_swapDbDetailsActionPerformed

    public static boolean isWriteComparedContentsRequested() {
        return writeComparedContents.isSelected();
    }

    public void writeDBInfoToFile(File file, String vendor, String host, String port, String dbname, String user, String password) {
        try {
            PrintStream out = new PrintStream(file);
            out.println("vendor=" + vendor);
            out.println("host=" + host);
            out.println("port=" + port);
            out.println("dbname=" + dbname);
            out.println("user=" + user);
            out.println("password=" + password);
            out.flush();
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "Error while saving DB info");
        }
    }

    public boolean checkDBInfo1() {
        if (host1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB host");
            return false;
        } else if (port1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB port");
            return false;
        } else if (dbname1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB name");
            return false;
        } else if (user1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter user name");
            return false;
        } else if (new String(password1.getPassword()).toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter password");
            return false;
        }

        return true;
    }

    public boolean checkDBInfo2() {
        if (host2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB host");
            return false;
        } else if (port2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB port");
            return false;
        } else if (dbname2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter DB name");
            return false;
        } else if (user2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter user name");
            return false;
        } else if (new String(password2.getPassword()).toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter password");
            return false;
        }

        return true;
    }

    public static String getBriefName() {
        return getHost(1).substring(getHost(1).lastIndexOf(".") + 1) + "-" + getPort(1) + "_" + getHost(2).substring(getHost(2).lastIndexOf(".") + 1) + "-" + getPort(2);
    }

    public static String getHost(int dbInfoNumber) {
        if (dbInfoNumber == 1) {
            return host1.getText();
        } else if (dbInfoNumber == 2) {
            return host2.getText();
        } else {
            return "localhost";
        }
    }

    public static String getPort(int dbInfoNumber) {
        if (dbInfoNumber == 1) {
            return port1.getText();
        } else if (dbInfoNumber == 2) {
            return port2.getText();
        } else {
            return "4928";
        }
    }

    public static String getDbName(int dbInfoNumber) {
        if (dbInfoNumber == 1) {
            return dbname1.getText();
        } else if (dbInfoNumber == 2) {
            return dbname2.getText();
        } else {
            return "mobiledoc";
        }
    }

    public String getUser(int dbInfoNumber) {
        if (dbInfoNumber == 1) {
            return user1.getText();
        } else if (dbInfoNumber == 2) {
            return user2.getText();
        } else {
            return "ecwDbUser";
        }
    }

    public String getPassword(int dbInfoNumber) {
        if (dbInfoNumber == 1) {
            return (new String(password1.getPassword()).toString());
        } else if (dbInfoNumber == 2) {
            return (new String(password1.getPassword()).toString());
        } else {
            return "Pwd4db@114";
        }
    }

    public static void saveSpecifiedListOfTables(String fileName) throws FileNotFoundException {
        File f = new File(fileName);
        PrintStream out = new PrintStream(f);
        out.print(specifiedTablesList.getText());
        out.flush();
        out.close();


    }

    private void loadSpecifiedTablesList(String fileName) {
        File f = new File(fileName);
        StringBuffer sbuff = new StringBuffer();
        if (f.exists()) {
            try {
                Scanner in = new Scanner(f);
                while (in.hasNext()) {
                    sbuff.append(in.nextLine());
                }
            } catch (FileNotFoundException fnfe) {
                Logs.write("Error: Couldn't read specified list of files from " + fileName, fnfe);
            }
            specifiedTablesList.setText(sbuff.toString());
        }
    }

    public static boolean isIgnoreTablesSelected() {
        if (ignoreSpecifiedTables.isSelected()) {
            return true;
        }
        return false;
    }

    private void loadConnectionInfo() {
        try {
            HashMap<String, String> primary = readInfoFromFile("primarydb.inf");
            HashMap<String, String> secondary = readInfoFromFile("secondarydb.inf");            

            vendor1.setSelectedIndex(indexNoForVendor(primary.get("vendor")));
            host1.setText(primary.get("host"));
            port1.setText(primary.get("port"));
            dbname1.setText(primary.get("dbname"));
            user1.setText(primary.get("user"));
            password1.setText(primary.get("password"));

            vendor2.setSelectedIndex(indexNoForVendor(secondary.get("vendor")));
            host2.setText(secondary.get("host"));
            port2.setText(secondary.get("port"));
            dbname2.setText(secondary.get("dbname"));
            user2.setText(secondary.get("user"));
            password2.setText(secondary.get("password"));
        } catch (FileNotFoundException ex) {
            //Ignore, if the db files not found
        }
    }

    public int indexNoForVendor(String vendor) {
        if (vendor.equalsIgnoreCase("mssql")) {
            return 1;
        }

        return 0;
    }

    public HashMap<String, String> readInfoFromFile(String fileName) throws FileNotFoundException {
        HashMap<String, String> map = new HashMap<String, String>();
        Scanner in = new Scanner(new File(fileName));
        while (in.hasNext()) {
            String temp = in.nextLine().replace(" ", "");
            StringTokenizer tokens = new StringTokenizer(temp, "=");
            String head = "";
            String value = "";
            if (tokens.countTokens() == 2) {
                head = tokens.nextToken();
                value = tokens.nextToken();
            }            
            map.put(head, value);
        }
        Logs.write(map.toString());
        return map;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField N;
    private javax.swing.JButton compareFirstNRows;
    private javax.swing.JButton compareLastNRows;
    private javax.swing.JButton compareRandomNthRows;
    private static javax.swing.JRadioButton compareSpecifiedTables;
    private javax.swing.JPanel customizeCompare;
    private javax.swing.ButtonGroup customizeCompareChoice;
    private javax.swing.JPanel dataContentsCompare;
    private static javax.swing.JTextField dbname1;
    private static javax.swing.JTextField dbname2;
    private static javax.swing.JButton generateColumnStructureCompare;
    private static javax.swing.JButton generateRowCountCompare;
    private static javax.swing.JTextField host1;
    private static javax.swing.JTextField host2;
    private static javax.swing.JRadioButton ignoreSpecifiedTables;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JPasswordField password1;
    private static javax.swing.JPasswordField password2;
    private static javax.swing.JProgressBar pbar1;
    private static javax.swing.JProgressBar pbar2;
    private static javax.swing.JTextField port1;
    private static javax.swing.JTextField port2;
    private javax.swing.JTabbedPane processTab;
    private javax.swing.JPanel rowCountCompare;
    private javax.swing.JButton setAndTest1;
    private javax.swing.JButton setAndTest2;
    private static javax.swing.JButton showColumnTypeMismatch;
    private static javax.swing.JButton showMissingColumns;
    private static javax.swing.JButton showMissingTables;
    private static javax.swing.JButton showRowCountMismatch;
    private static javax.swing.JTextArea specifiedTablesList;
    private javax.swing.JButton swapDbDetails;
    private javax.swing.JPanel tableStructureCompare;
    private static javax.swing.JTextField user1;
    private static javax.swing.JTextField user2;
    private static javax.swing.JComboBox vendor1;
    private static javax.swing.JComboBox vendor2;
    private static javax.swing.JCheckBox writeComparedContents;
    // End of variables declaration//GEN-END:variables
}
